This document gives instructions for a few simple workflows using git and github.
In all cases, these instructions assume that you have already set up git on your computer and that you have already created or cloned a repository and have correctly set it up to interface with github.
For instructions on setting up git on a new computer or creating or cloning a repository, please see the full [git tutorial](https://github.gatech.edu/akirkpatrick3/git-resources/blob/master/git_tutorial.md).

These instructions also assume that you are working with only one remote and only one branch.
(If you don't know what those words mean, don't worry.
If you don't know what these things are, then you probably aren't using multiple!)

# Contributing code to a collatorative project

## When you sit down to start work

1. Navigate to the repository.
```
cd path/to/repository
```

2. Pull down the latest changes from your collaborators.
```
git pull
```
In the vast majority of cases, this command will succeed without incident, and git will give you a message saying that it has made a merge by a recursive method. 
(Or your repository was already up to date in which case no merge was necessary.)
If git informs you that a manual merge is required and you are not comfortable with the merge process, please seek advice from a more experienced team member.

##After each hour (approximately) of work and when you finish any major tasks

1. Review the changes that you have made.
```
git status
```

2. Add files where you have made changes to the staging area. (These will mainly be source code and/or documentation in plain text or markup formats.)

```
git add file1
git add file2
git add file3
```

3. Take a look at your staged commit to make sure that you have not forgotten any important files.

```
git status
```
With the possible exception of one or two temp files which you are actively using for experimentation in your current work session, all new or modified files containing code or documentation should be included in your commit.
Automatically generated output (compiled code, log files) should not be included in commits and can be excluded from the output of `git status` using the `.gitignore` file. 
(See the tutorial or ask a more experienced team member for more information on `.gitignore.)
Large amounts of data should never be included in repositories, but it is sometimes appropriate to include small amounts of data as a way of tracking the evolution of program output.
This should be discussed with your collaborators, and any data files you do not wish to include in the repository can be similarly excluded with `.gitignore`.)

If your commit looks good, then continue to the next step.
If you need to make changes, use `git add` and `git rm` to add and remove files as needed.

4. Make a commit to record your work.
```
git commit
```

5. Git should open your text editor so that you can enter a commit message.
Write a message that describes what changes you have made and why.
(You do not need to record which files were changed, your own name, or any timestamp information, as git saves this automatically.)

6. Optionally, if you know that your collaborators are also currently writing code, go ahead and push your changes to Github.
```
git push
```

## When you finish work for the day
1. Review the changes that you have made.
```
git status
```

2. Add files where you have made changes to the staging area. (These will mainly be source code and/or documentation in plain text or markup formats.)

```
git add file1
git add file2
git add file3
```

3. Take a look at your staged commit to make sure that you have not forgotten any important files.

```
git status
```
If your commit looks good, then continue to the next step.
(See previous section for guidelines for what to include in commits.)
If you need to make changes, use `git add` and `git rm` to add and remove files as needed.

4. Make a commit to record your work.
```
git commit
```

5. Git should open your text editor so that you can enter a commit message.
Write a message that describes what changes you have made and why.

6. Push your changes to Github.
```
git push
```

If this command fails, the most likely cause is that one of your collaborators has pushed changes since your last pull.
To fix this, pull and then push again.
```
git pull
git push
```
When running `git pull`, there is a small chance that git will tell you that you need to manually merge changes.
(This can happen when you and a colleague both edit the same part of the same file.)
If you are not comfortable with the manual merge process, please seek assistance from a more experienced team member.


